import pygame
import sys

# Initialize pygame
pygame.init()

# Set up display
WIDTH, HEIGHT = 800, 600
win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Simple Platformer")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

# Player settings
player_width, player_height = 50, 60
player_x, player_y = WIDTH // 2, HEIGHT - player_height - 10
player_vel = 5
jump_height = 15
is_jumping = False
jump_vel = jump_height

# Gravity settings
gravity = 1
fall_vel = 0

# Platform settings
platforms = [
    pygame.Rect(100, HEIGHT - 40, 200, 20),
    pygame.Rect(400, HEIGHT - 150, 200, 20),
    pygame.Rect(200, HEIGHT - 250, 200, 20),
    pygame.Rect(100, HEIGHT - 350, 200, 20),
]

# Game loop
clock = pygame.time.Clock()

while True:
    clock.tick(30)  # FPS
    win.fill(BLUE)  # Background color

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Player movement
    keys = pygame.key.get_pressed()
    
    if keys[pygame.K_LEFT] and player_x - player_vel > 0:
        player_x -= player_vel
    if keys[pygame.K_RIGHT] and player_x + player_vel < WIDTH - player_width:
        player_x += player_vel
    if not is_jumping and keys[pygame.K_SPACE]:  # Start jump
        is_jumping = True
        jump_vel = jump_height

    # Jumping and gravity
    if is_jumping:
        player_y -= jump_vel  # Move player up
        jump_vel -= gravity  # Reduce velocity to simulate gravity
        if jump_vel < -jump_height:  # End jump
            is_jumping = False
    else:
        # Apply gravity if not standing on a platform
        fall_vel += gravity
        player_y += fall_vel
        on_platform = False
        for platform in platforms:
            if platform.colliderect((player_x, player_y, player_width, player_height)):
                on_platform = True
                player_y = platform.y - player_height  # Stand on top of platform
                fall_vel = 0  # Reset fall velocity
                break
        if not on_platform:
            player_y += fall_vel

    # Draw player
    player_rect = pygame.Rect(player_x, player_y, player_width, player_height)
    pygame.draw.rect(win, GREEN, player_rect)

    # Draw platforms
    for platform in platforms:
        pygame.draw.rect(win, BLACK, platform)

    # Update display
    pygame.display.update()
